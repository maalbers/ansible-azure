{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {



  },
  "variables": {
    "location": "[resourceGroup().location]",
    "LoadBalancer-nameAPI": "apiLB",
    "LoadBalancer-nameRouter": "routerLB",
    "backend-address-pool-nameAPI": "apiPool",
    "backend-address-pool-nameRouter": "routerPool",
    "PublicIP-nameAPI": "API-Public-IP",
    "PublicIP-nameRouter": "Router-Public-IP",
    "virtualNetworkName": "openshiftVnet",
    "addressPrefix": "10.0.0.0/16",
    "infranodesubnetName": "infranodeSubnet",
    "infranodesubnetPrefix": "10.0.2.0/24",
    "nodesubnetName": "nodeSubnet",
    "nodesubnetPrefix": "10.0.1.0/24",
    "mastersubnetName": "masterSubnet",
    "mastersubnetPrefix": "10.0.0.0/24",
    "apiVersion": "2015-06-15",


    "master-AvailSet": "masterAvailSet",
    "infranode-AvailSet": "infranodeAvailSet",
    "node-AvailSet": "nodeAvailSet",

    "vhdStorageType": "Standard_LRS",
    "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "infranodeSubnetRef": "[concat(variables('vnetId'), '/subnets/', variables('infranodesubnetName'))]",
    "nodeSubnetRef": "[concat(variables('vnetId'), '/subnets/', variables('nodesubnetName'))]",
    "masterSubnetRef": "[concat(variables('vnetId'), '/subnets/', variables('mastersubnetName'))]",
    "centos": {
      "publisher": "Openlogic",
      "offer": "CentOS",
      "sku": "7.2",
      "version": "latest"
    },
    "rhel": {
      "publisher": "RedHat",
      "offer": "RHEL",
      "sku": "7.2",
      "version": "latest"
    }
  },
  "resources": [

    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicip-nameAPI')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PublicIPAddressAPI"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicip-nameRouter')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PublicIPAddressRouter"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },

    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('LoadBalancer-nameAPI')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Load Balancer API"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('PublicIP-nameAPI'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backend-address-pool-nameAPI')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "Http",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameAPI')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameAPI')), '/backendAddressPools/', variables('backend-address-pool-nameAPI'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameAPI')), '/probes/TCP-Probe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "TCP-Probe",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatRules": [ ],
        "outboundNatRules": [ ],
        "inboundNatPools": [ ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('PublicIP-nameRouter'))]"
      ]
    },


    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('LoadBalancer-nameRouter')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Load Balancer Router"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('PublicIP-nameRouter'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backend-address-pool-nameRouter')]"
          }
        ],
        "loadBalancingRules": [
   {
            "name": "Http",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameRouter')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameRouter')), '/backendAddressPools/', variables('backend-address-pool-nameRouter'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameRouter')), '/probes/TCP-Probe')]"
              }
            }
          },
    {
            "name": "Https",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameRouter')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
              },
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 4,
              "protocol": "Tcp",
              "loadDistribution": "Default",
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameRouter')), '/backendAddressPools/', variables('backend-address-pool-nameRouter'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('LoadBalancer-nameRouter')), '/probes/TCP-Probehttps')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "TCP-Probe",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          },
   {
            "name": "TCP-Probehttps",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatRules": [ ],
        "outboundNatRules": [ ],
        "inboundNatPools": [ ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('PublicIP-nameRouter'))]"
      ]
    },

    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('master-AvailSet')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "platformFaultDomainCount": "3",
        "platformUpdateDomainCount": "5"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('infranode-AvailSet')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "platformFaultDomainCount": "3",
        "platformUpdateDomainCount": "5"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('node-AvailSet')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "platformFaultDomainCount": "3",
        "platformUpdateDomainCount": "5"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('infranodesubnetName')]",
            "properties": {
              "addressPrefix": "[variables('infranodesubnetPrefix')]"
            }
          },
          {
            "name": "[variables('nodesubnetName')]",
            "properties": {
              "addressPrefix": "[variables('nodesubnetPrefix')]"
            }
          },
          {
            "name": "[variables('mastersubnetName')]",
            "properties": {
              "addressPrefix": "[variables('mastersubnetPrefix')]"
            }
          }
        ]
      }
    }


  ]
}
